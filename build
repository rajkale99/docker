#!/bin/bash
cd /tmp/rom # Depends on where source got synced

# Normal build steps
. build/envsetup.sh
export LEGION_BUILD_TYPE=OFFICIAL
lunch legion_miatoll-user
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 20G # It took only 6.4GB for mido
ccache -o compression=true # Will save times and data to download and upload ccache, also negligible performance issue
ccache -z # Clear old stats, so monitor script will provide real ccache statistics

# Next 8 lines should be run first to collect ccache and then upload, after doning it 1 or 2 times, our ccache will help to build without these 8 lines.
#make api-stubs-docs || echo no problem, we need ccache
#make system-api-stubs-docs || echo no problem we need ccache
#make test-api-stubs-docs || echo no problem, we need ccache
#make legion -j8
#ccache -s
#and dont use below codes for first 1 or 2 times, to get ccache uploaded,


# upload function for uploading rom zip file! I don't want unwanted builds in my google drive haha!
up(){
	curl --upload-file $1 https://transfer.sh/$(basename $1); echo
	# 14 days, 10 GB limit
}

# It's recommended to use google drive(rclone) as upload solution for coping with the time limit. Un-comment next 3 lines to upload with rclone in drive. Also change apon and junk according to your config name, uploading folder of drive
up(){
	time rclone copy $1 drive:Legion -P # apon is my rclone config name, 
}

# Upload rom zip file if succeed to build! Send notification to tg! And send shell to tg if build fails!

# Let's compile by parts! Coz of ram issue!
make api-stubs-docs || echo no problem
make system-api-stubs-docs || echo no problem
make test-api-stubs-docs || echo no problem

make legion -j10 \
	&& send_zip=$(up out/target/product/miatoll/*zip) \
	|| tmate -S /tmp/tmate.sock new-session -d && tmate -S /tmp/tmate.sock wait tmate-ready && send_shell=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}') && ccache -s && sleep 2h

size="$(du -h ${zip}|awk '{print $1}')"
mdsum="$(md5sum ${zip}|awk '{print $1}')"
file=$(basename $zip)
rclone -P copy $zip drive:Builds/$gdrivedir #fetches the drive link
glink="$(rclone link drive:Builds/${gdrivedir}/${file})" 
index="https://builds.projectlegionos.workers.dev/0:/${gdrivedir}/${file}" # sets up an index link also

ccache -s # Let's print ccache statistics finally
